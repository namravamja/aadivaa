generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Buyer {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String?
  firstName String?
  lastName  String?

  googleId    String? @unique
  provider    String? @default("local") // "local" or "google"
  isOAuthUser Boolean @default(false)

  phone                 String?
  avatar                String?
  dateOfBirth           DateTime?
  gender                String?
  addresses             Address[]
  wishlistItems         Wishlist[]
  cartItems             Cart[]
  orders                Order[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  isAuthenticated       Boolean    @default(false)
  forgotPasswordToken   String?    @unique
  forgotPasswordExpires DateTime?
  verifyToken           String?    @unique
  verifyExpires         DateTime?
  isVerified            Boolean    @default(false)
  Review                Review[]
}

model Wishlist {
  id        String   @id @default(uuid())
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([buyerId, productId])
}

model Cart {
  id        String   @id @default(uuid())
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buyerId, productId])
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  quantity        Int
  priceAtPurchase Float
  artist          Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId        String
}

model Order {
  id                String      @id @default(uuid())
  buyer             Buyer       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId           String
  orderItems        OrderItem[]
  totalAmount       Float
  status            String      @default("pending")
  shippingAddress   Address?    @relation("ShippingAddressRelation", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId Int?
  paymentMethod     String
  paymentStatus     String      @default("unpaid")
  placedAt          DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Address {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  company    String?
  street     String?
  apartment  String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  buyer      Buyer   @relation(fields: [userId], references: [id], onDelete: Cascade) // âœ… Correct place for onDelete
  userId     String
  isDefault  Boolean @default(false)
  orders     Order[] @relation("ShippingAddressRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buyer_addresses")
}

model Product {
  id                   String   @id @default(uuid())
  productName          String
  category             String
  shortDescription     String
  sellingPrice         String
  mrp                  String
  availableStock       String
  skuCode              String
  productImages        String[]
  weight               String
  length               String
  width                String
  height               String
  shippingCost         String
  deliveryTimeEstimate String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  artist    Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String
  Wishlist  Wishlist[]
  Cart      Cart[]
  OrderItem OrderItem[]
  Review    Review[]
}

model Artist {
  id                         String   @id @default(uuid())
  fullName                   String?
  profileProgress            Int?     @default(0)
  storeName                  String?
  email                      String   @unique
  mobile                     String?
  password                   String?
  confirmPassword            String?
  businessType               String?
  businessRegistrationNumber String?
  productCategories          String[]
  businessLogo               String?

  googleId    String? @unique
  provider    String? @default("local") // "local" or "google"
  isOAuthUser Boolean @default(false)

  businessAddress    BusinessAddress?  @relation(fields: [businessAddressId], references: [id], onDelete: SetNull)
  businessAddressId  String?           @unique
  warehouseAddress   WarehouseAddress? @relation(fields: [warehouseAddressId], references: [id], onDelete: SetNull)
  warehouseAddressId String?           @unique
  documents          Documents?        @relation(fields: [documentsId], references: [id], onDelete: SetNull)
  documentsId        String?           @unique
  socialLinks        SocialLinks?      @relation(fields: [socialLinksId], references: [id], onDelete: SetNull)
  socialLinksId      String?           @unique

  bankAccountName       String?
  bankName              String?
  accountNumber         String?
  ifscCode              String?
  upiId                 String?
  gstNumber             String?
  panNumber             String?
  shippingType          String?
  serviceAreas          String[]
  inventoryVolume       String?
  supportContact        String?
  returnPolicy          String?
  workingHours          String?
  termsAgreed           Boolean?
  digitalSignature      String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  isAuthenticated       Boolean   @default(false)
  forgotPasswordToken   String?   @unique
  forgotPasswordExpires DateTime?
  verifyToken           String?   @unique
  verifyExpires         DateTime?
  isVerified            Boolean   @default(false)

  products   Product[]
  orderItems OrderItem[]
  Review     Review[]
}

model BusinessAddress {
  id      String  @id @default(uuid())
  street  String
  city    String?
  state   String?
  country String?
  pinCode String?

  artist Artist?
}

model WarehouseAddress {
  id             String   @id @default(uuid())
  street         String
  sameAsBusiness Boolean?
  city           String?
  state          String?
  country        String?
  pinCode        String?

  artist Artist?
}

model Documents {
  id              String  @id @default(uuid())
  gstCertificate  String?
  panCard         String?
  businessLicense String?
  canceledCheque  String?

  artist Artist?
}

model SocialLinks {
  id        String  @id @default(uuid())
  website   String?
  instagram String?
  facebook  String?
  twitter   String?

  artist Artist?
}

model Review {
  id       String   @id @default(uuid())
  rating   Int
  title    String
  text     String
  date     DateTime @default(now())
  verified Boolean  @default(false)

  buyer   Buyer  @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
}
