generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Buyer {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String
  firstName             String?
  lastName              String?
  phone                 String?
  avatar                String?
  dateOfBirth           DateTime?
  gender                String?
  addresses             Address[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  isAuthenticated       Boolean   @default(false)
  forgotPasswordToken   String?   @unique
  forgotPasswordExpires DateTime?
  verifyToken           String?   @unique
  verifyExpires         DateTime?
  isVerified            Boolean   @default(false)

  wishlistItems Wishlist[]
  cartItems     Cart[]
  orders        Order[]
}

model Wishlist {
  id      String @id @default(uuid())
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  buyerId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())

  @@unique([buyerId, productId]) // Prevent duplicate wishlist entries
}

model Cart {
  id      String @id @default(uuid())
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  buyerId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int @default(0) // How many of this product are in the cart

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buyerId, productId]) // Prevent duplicate cart entries
}

model OrderItem {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity        Int
  priceAtPurchase Float
}

model Order {
  id      String @id @default(uuid())
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  buyerId String

  orderItems OrderItem[]

  totalAmount     Float
  status          String @default("pending") // pending, shipped, delivered, cancelled
  shippingAddress String
  paymentMethod   String 
  paymentStatus   String @default("unpaid") // unpaid, paid, failed

  placedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  company    String? // Optional
  street     String?
  apartment  String? // Optional
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  buyer      Buyer   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  isDefault  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buyer_addresses")
}

model Artist {
  id                         String   @id @default(uuid())
  fullName                   String?
  profileProgress            Int?     @default(0)
  storeName                  String?
  email                      String   @unique
  mobile                     String?
  password                   String
  confirmPassword            String?
  businessType               String?
  businessRegistrationNumber String?
  productCategories          String[]
  businessLogo               String?

  businessAddress   BusinessAddress? @relation(fields: [businessAddressId], references: [id])
  businessAddressId String?          @unique

  warehouseAddress   WarehouseAddress? @relation(fields: [warehouseAddressId], references: [id])
  warehouseAddressId String?           @unique

  bankAccountName String?
  bankName        String?
  accountNumber   String?
  ifscCode        String?
  upiId           String?
  gstNumber       String?
  panNumber       String?

  documents   Documents? @relation(fields: [documentsId], references: [id])
  documentsId String?    @unique

  shippingType    String?
  serviceAreas    String[]
  inventoryVolume String?
  supportContact  String?
  returnPolicy    String?
  workingHours    String?

  socialLinks   SocialLinks? @relation(fields: [socialLinksId], references: [id])
  socialLinksId String?      @unique

  termsAgreed      Boolean?
  digitalSignature String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  isAuthenticated  Boolean   @default(false)

  forgotPasswordToken   String?   @unique
  forgotPasswordExpires DateTime?
  verifyToken           String?   @unique
  verifyExpires         DateTime?
  isVerified            Boolean   @default(false)

  products Product[] // âœ… One-to-many relation to Product
}

model Product {
  id               String @id @default(uuid())
  productName      String
  category         String
  shortDescription String

  sellingPrice   String
  mrp            String
  availableStock String
  skuCode        String

  productImages String[] // Array of image URLs

  weight               String
  length               String
  width                String
  height               String
  shippingCost         String
  deliveryTimeEstimate String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artist    Artist      @relation(fields: [artistId], references: [id])
  artistId  String
  Wishlist  Wishlist[]
  Cart      Cart[]
  OrderItem OrderItem[]
}

model BusinessAddress {
  id      String  @id @default(uuid())
  street  String
  city    String?
  state   String?
  country String?
  pinCode String?

  artist Artist?
}

model WarehouseAddress {
  id             String   @id @default(uuid())
  street         String
  sameAsBusiness Boolean?
  city           String?
  state          String?
  country        String?
  pinCode        String?

  artist Artist?
}

model Documents {
  id              String  @id @default(uuid())
  gstCertificate  String?
  panCard         String?
  businessLicense String?
  canceledCheque  String?

  artist Artist?
}

model SocialLinks {
  id        String  @id @default(uuid())
  website   String?
  instagram String?
  facebook  String?
  twitter   String?

  artist Artist?
}
